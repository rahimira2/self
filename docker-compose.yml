version: '3.8'

services:
  telegram-music-bot:
    build: .
    image: telegram-music-bot:latest
    container_name: telegram-music-bot
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "8080:8080"
    
    # Environment variables (override config.lua)
    environment:
      - TZ=Asia/Tehran
      - BOT_TOKEN=${BOT_TOKEN}
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - PHONE_NUMBER=${PHONE_NUMBER}
      - OWNER_ID=${OWNER_ID}
      - WEB_SECRET=${WEB_SECRET:-music_bot_secret_2024}
    
    # Volumes for persistent data
    volumes:
      - ./downloads:/app/downloads
      - ./logs:/app/logs
      - ./config.lua:/app/config.lua:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - musicbot-network

# Optional: Database service (for future use)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: musicbot-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: musicbot
  #     POSTGRES_USER: musicbot
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-musicbot_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - musicbot-network

# Optional: Redis for caching (for future use)
  # redis:
  #   image: redis:7-alpine
  #   container_name: musicbot-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - musicbot-network

networks:
  musicbot-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: